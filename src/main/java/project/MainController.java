package project;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

import project.User;
import project.UserRepository;

@Controller    // This means that this class is a Controller
//@RequestMapping(path="/carDrive") // This means URL's start with /carDrive
public class MainController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private UserRepository userRepository;

	@GetMapping(path="/add") // Map ONLY GET Requests
	public @ResponseBody String addNewUser (@RequestParam String firstName
			,@RequestParam String lastName, @RequestParam String email, @RequestParam String pass) {
		// @ResponseBody means the returned String is the response, not a view name
		// @RequestParam means it is a parameter from the GET or POST request

		User n = new User();
		n.setFirstName(firstName);
		n.setLastName(lastName);
		n.setEmail(email);
		n.setPassword(pass);
		userRepository.save(n);
		return "Saved";
	}

	@RequestMapping(value="/all")
	public @ResponseBody Iterable<User> getAllUsers() {
		// This returns a JSON or XML with the users
		return userRepository.findAll();
	}

	// userList() is similar to the getAllUsers() function
    // but will redirect to an html file that will display
    // the users in a more organized fashion
	@RequestMapping(value="/users", method = RequestMethod.GET)
	public String usersList(Model model){
		model.addAttribute("users", userRepository.findAll());
		//provides an iterated list that allows us to use it in thymeleaf

		return "users";
		// this maps to corresponding .html file
		// with the same name
	}

	// removeUser() is called upon the pressing of a the remove button
    // located in the users.html file.
	@RequestMapping(value="/user/remove/{id}", method = RequestMethod.DELETE)
	public String removeUser(@PathVariable(value="id") long userID){
		//User user = userRepository.findOne(userID);		// return user to delete
		//userRepository.delete(user);						// delete returned user

		userRepository.delete(userID);						// delete user from given userID parameter
		return "redirect:/users";
		//return "good luck my friend";

	}

}